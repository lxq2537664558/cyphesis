// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubDetourObstacleAvoidance_custom.h file.

#include "navigation/external/RecastDetour/Detour/Include/DetourObstacleAvoidance.h"
#include "stubDetourObstacleAvoidance_custom.h"

#ifndef STUB_NAVIGATION_EXTERNAL_RECASTDETOUR_DETOUR_INCLUDE_DETOUROBSTACLEAVOIDANCE_H
#define STUB_NAVIGATION_EXTERNAL_RECASTDETOUR_DETOUR_INCLUDE_DETOUROBSTACLEAVOIDANCE_H



#ifndef STUB_dtObstacleAvoidanceDebugData_dtObstacleAvoidanceDebugData
//#define STUB_dtObstacleAvoidanceDebugData_dtObstacleAvoidanceDebugData
   dtObstacleAvoidanceDebugData::dtObstacleAvoidanceDebugData()
    : m_vel(nullptr),m_ssize(nullptr),m_pen(nullptr),m_vpen(nullptr),m_vcpen(nullptr),m_spen(nullptr),m_tpen(nullptr)
  {
    
  }
#endif //STUB_dtObstacleAvoidanceDebugData_dtObstacleAvoidanceDebugData

#ifndef STUB_dtObstacleAvoidanceDebugData_dtObstacleAvoidanceDebugData_DTOR
//#define STUB_dtObstacleAvoidanceDebugData_dtObstacleAvoidanceDebugData_DTOR
   dtObstacleAvoidanceDebugData::~dtObstacleAvoidanceDebugData()
  {
    
  }
#endif //STUB_dtObstacleAvoidanceDebugData_dtObstacleAvoidanceDebugData_DTOR

#ifndef STUB_dtObstacleAvoidanceDebugData_init
//#define STUB_dtObstacleAvoidanceDebugData_init
  bool dtObstacleAvoidanceDebugData::init(const int maxSamples)
  {
    return false;
  }
#endif //STUB_dtObstacleAvoidanceDebugData_init

#ifndef STUB_dtObstacleAvoidanceDebugData_reset
//#define STUB_dtObstacleAvoidanceDebugData_reset
  void dtObstacleAvoidanceDebugData::reset()
  {
    
  }
#endif //STUB_dtObstacleAvoidanceDebugData_reset

#ifndef STUB_dtObstacleAvoidanceDebugData_addSample
//#define STUB_dtObstacleAvoidanceDebugData_addSample
  void dtObstacleAvoidanceDebugData::addSample(const float* vel, const float ssize, const float pen, const float vpen, const float vcpen, const float spen, const float tpen)
  {
    
  }
#endif //STUB_dtObstacleAvoidanceDebugData_addSample

#ifndef STUB_dtObstacleAvoidanceDebugData_normalizeSamples
//#define STUB_dtObstacleAvoidanceDebugData_normalizeSamples
  void dtObstacleAvoidanceDebugData::normalizeSamples()
  {
    
  }
#endif //STUB_dtObstacleAvoidanceDebugData_normalizeSamples



#ifndef STUB_dtObstacleAvoidanceQuery_dtObstacleAvoidanceQuery
//#define STUB_dtObstacleAvoidanceQuery_dtObstacleAvoidanceQuery
   dtObstacleAvoidanceQuery::dtObstacleAvoidanceQuery()
    : m_circles(nullptr),m_segments(nullptr)
  {
    
  }
#endif //STUB_dtObstacleAvoidanceQuery_dtObstacleAvoidanceQuery

#ifndef STUB_dtObstacleAvoidanceQuery_dtObstacleAvoidanceQuery_DTOR
//#define STUB_dtObstacleAvoidanceQuery_dtObstacleAvoidanceQuery_DTOR
   dtObstacleAvoidanceQuery::~dtObstacleAvoidanceQuery()
  {
    
  }
#endif //STUB_dtObstacleAvoidanceQuery_dtObstacleAvoidanceQuery_DTOR

#ifndef STUB_dtObstacleAvoidanceQuery_init
//#define STUB_dtObstacleAvoidanceQuery_init
  bool dtObstacleAvoidanceQuery::init(const int maxCircles, const int maxSegments)
  {
    return false;
  }
#endif //STUB_dtObstacleAvoidanceQuery_init

#ifndef STUB_dtObstacleAvoidanceQuery_reset
//#define STUB_dtObstacleAvoidanceQuery_reset
  void dtObstacleAvoidanceQuery::reset()
  {
    
  }
#endif //STUB_dtObstacleAvoidanceQuery_reset

#ifndef STUB_dtObstacleAvoidanceQuery_addCircle
//#define STUB_dtObstacleAvoidanceQuery_addCircle
  void dtObstacleAvoidanceQuery::addCircle(const float* pos, const float rad, const float* vel, const float* dvel)
  {
    
  }
#endif //STUB_dtObstacleAvoidanceQuery_addCircle

#ifndef STUB_dtObstacleAvoidanceQuery_addSegment
//#define STUB_dtObstacleAvoidanceQuery_addSegment
  void dtObstacleAvoidanceQuery::addSegment(const float* p, const float* q)
  {
    
  }
#endif //STUB_dtObstacleAvoidanceQuery_addSegment

#ifndef STUB_dtObstacleAvoidanceQuery_sampleVelocityGrid
//#define STUB_dtObstacleAvoidanceQuery_sampleVelocityGrid
  int dtObstacleAvoidanceQuery::sampleVelocityGrid(const float* pos, const float rad, const float vmax, const float* vel, const float* dvel, float* nvel, const dtObstacleAvoidanceParams* params, dtObstacleAvoidanceDebugData* debug )
  {
    return 0;
  }
#endif //STUB_dtObstacleAvoidanceQuery_sampleVelocityGrid

#ifndef STUB_dtObstacleAvoidanceQuery_sampleVelocityAdaptive
//#define STUB_dtObstacleAvoidanceQuery_sampleVelocityAdaptive
  int dtObstacleAvoidanceQuery::sampleVelocityAdaptive(const float* pos, const float rad, const float vmax, const float* vel, const float* dvel, float* nvel, const dtObstacleAvoidanceParams* params, dtObstacleAvoidanceDebugData* debug )
  {
    return 0;
  }
#endif //STUB_dtObstacleAvoidanceQuery_sampleVelocityAdaptive

#ifndef STUB_dtObstacleAvoidanceQuery_prepare
//#define STUB_dtObstacleAvoidanceQuery_prepare
  void dtObstacleAvoidanceQuery::prepare(const float* pos, const float* dvel)
  {
    
  }
#endif //STUB_dtObstacleAvoidanceQuery_prepare

#ifndef STUB_dtObstacleAvoidanceQuery_processSample
//#define STUB_dtObstacleAvoidanceQuery_processSample
  float dtObstacleAvoidanceQuery::processSample(const float* vcand, const float cs, const float* pos, const float rad, const float* vel, const float* dvel, dtObstacleAvoidanceDebugData* debug)
  {
    return 0;
  }
#endif //STUB_dtObstacleAvoidanceQuery_processSample

#ifndef STUB_dtObstacleAvoidanceQuery_insertCircle
//#define STUB_dtObstacleAvoidanceQuery_insertCircle
  dtObstacleCircle* dtObstacleAvoidanceQuery::insertCircle(const float dist)
  {
    return nullptr;
  }
#endif //STUB_dtObstacleAvoidanceQuery_insertCircle

#ifndef STUB_dtObstacleAvoidanceQuery_insertSegment
//#define STUB_dtObstacleAvoidanceQuery_insertSegment
  dtObstacleSegment* dtObstacleAvoidanceQuery::insertSegment(const float dist)
  {
    return nullptr;
  }
#endif //STUB_dtObstacleAvoidanceQuery_insertSegment


#endif