// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubDetourNavMeshQuery_custom.h file.

#include "navigation/external/RecastDetour/Detour/Include/DetourNavMeshQuery.h"
#include "stubDetourNavMeshQuery_custom.h"

#ifndef STUB_NAVIGATION_EXTERNAL_RECASTDETOUR_DETOUR_INCLUDE_DETOURNAVMESHQUERY_H
#define STUB_NAVIGATION_EXTERNAL_RECASTDETOUR_DETOUR_INCLUDE_DETOURNAVMESHQUERY_H

#ifndef STUB_dtQueryFilter_dtQueryFilter
//#define STUB_dtQueryFilter_dtQueryFilter
   dtQueryFilter::dtQueryFilter()
  {
    
  }
#endif //STUB_dtQueryFilter_dtQueryFilter

#ifndef STUB_dtQueryFilter_passFilter
//#define STUB_dtQueryFilter_passFilter
  bool dtQueryFilter::passFilter(const dtPolyRef ref, const dtMeshTile* tile, const dtPoly* poly) const
  {
    return false;
  }
#endif //STUB_dtQueryFilter_passFilter

#ifndef STUB_dtQueryFilter_passFilter
//#define STUB_dtQueryFilter_passFilter
  bool dtQueryFilter::passFilter(const dtPolyRef ref, const dtMeshTile* tile, const dtPoly* poly) const
  {
    return false;
  }
#endif //STUB_dtQueryFilter_passFilter

#ifndef STUB_dtQueryFilter_getCost
//#define STUB_dtQueryFilter_getCost
  float dtQueryFilter::getCost(const float* pa, const float* pb, const dtPolyRef prevRef, const dtMeshTile* prevTile, const dtPoly* prevPoly, const dtPolyRef curRef, const dtMeshTile* curTile, const dtPoly* curPoly, const dtPolyRef nextRef, const dtMeshTile* nextTile, const dtPoly* nextPoly) const
  {
    return 0;
  }
#endif //STUB_dtQueryFilter_getCost

#ifndef STUB_dtQueryFilter_getCost
//#define STUB_dtQueryFilter_getCost
  float dtQueryFilter::getCost(const float* pa, const float* pb, const dtPolyRef prevRef, const dtMeshTile* prevTile, const dtPoly* prevPoly, const dtPolyRef curRef, const dtMeshTile* curTile, const dtPoly* curPoly, const dtPolyRef nextRef, const dtMeshTile* nextTile, const dtPoly* nextPoly) const
  {
    return 0;
  }
#endif //STUB_dtQueryFilter_getCost


#ifndef STUB_dtNavMeshQuery_dtNavMeshQuery
//#define STUB_dtNavMeshQuery_dtNavMeshQuery
   dtNavMeshQuery::dtNavMeshQuery()
    : m_nav(nullptr),m_tinyNodePool(nullptr),m_nodePool(nullptr),m_openList(nullptr)
  {
    
  }
#endif //STUB_dtNavMeshQuery_dtNavMeshQuery

#ifndef STUB_dtNavMeshQuery_dtNavMeshQuery_DTOR
//#define STUB_dtNavMeshQuery_dtNavMeshQuery_DTOR
   dtNavMeshQuery::~dtNavMeshQuery()
  {
    
  }
#endif //STUB_dtNavMeshQuery_dtNavMeshQuery_DTOR

#ifndef STUB_dtNavMeshQuery_init
//#define STUB_dtNavMeshQuery_init
  dtStatus dtNavMeshQuery::init(const dtNavMesh* nav, const int maxNodes)
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_init

#ifndef STUB_dtNavMeshQuery_findPath
//#define STUB_dtNavMeshQuery_findPath
  dtStatus dtNavMeshQuery::findPath(dtPolyRef startRef, dtPolyRef endRef, const float* startPos, const float* endPos, const dtQueryFilter* filter, dtPolyRef* path, int* pathCount, const int maxPath) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findPath

#ifndef STUB_dtNavMeshQuery_findStraightPath
//#define STUB_dtNavMeshQuery_findStraightPath
  dtStatus dtNavMeshQuery::findStraightPath(const float* startPos, const float* endPos, const dtPolyRef* path, const int pathSize, float* straightPath, unsigned char* straightPathFlags, dtPolyRef* straightPathRefs, int* straightPathCount, const int maxStraightPath, const int options ) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findStraightPath

#ifndef STUB_dtNavMeshQuery_initSlicedFindPath
//#define STUB_dtNavMeshQuery_initSlicedFindPath
  dtStatus dtNavMeshQuery::initSlicedFindPath(dtPolyRef startRef, dtPolyRef endRef, const float* startPos, const float* endPos, const dtQueryFilter* filter)
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_initSlicedFindPath

#ifndef STUB_dtNavMeshQuery_updateSlicedFindPath
//#define STUB_dtNavMeshQuery_updateSlicedFindPath
  dtStatus dtNavMeshQuery::updateSlicedFindPath(const int maxIter, int* doneIters)
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_updateSlicedFindPath

#ifndef STUB_dtNavMeshQuery_finalizeSlicedFindPath
//#define STUB_dtNavMeshQuery_finalizeSlicedFindPath
  dtStatus dtNavMeshQuery::finalizeSlicedFindPath(dtPolyRef* path, int* pathCount, const int maxPath)
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_finalizeSlicedFindPath

#ifndef STUB_dtNavMeshQuery_finalizeSlicedFindPathPartial
//#define STUB_dtNavMeshQuery_finalizeSlicedFindPathPartial
  dtStatus dtNavMeshQuery::finalizeSlicedFindPathPartial(const dtPolyRef* existing, const int existingSize, dtPolyRef* path, int* pathCount, const int maxPath)
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_finalizeSlicedFindPathPartial

#ifndef STUB_dtNavMeshQuery_findPolysAroundCircle
//#define STUB_dtNavMeshQuery_findPolysAroundCircle
  dtStatus dtNavMeshQuery::findPolysAroundCircle(dtPolyRef startRef, const float* centerPos, const float radius, const dtQueryFilter* filter, dtPolyRef* resultRef, dtPolyRef* resultParent, float* resultCost, int* resultCount, const int maxResult) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findPolysAroundCircle

#ifndef STUB_dtNavMeshQuery_findPolysAroundShape
//#define STUB_dtNavMeshQuery_findPolysAroundShape
  dtStatus dtNavMeshQuery::findPolysAroundShape(dtPolyRef startRef, const float* verts, const int nverts, const dtQueryFilter* filter, dtPolyRef* resultRef, dtPolyRef* resultParent, float* resultCost, int* resultCount, const int maxResult) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findPolysAroundShape

#ifndef STUB_dtNavMeshQuery_findNearestPoly
//#define STUB_dtNavMeshQuery_findNearestPoly
  dtStatus dtNavMeshQuery::findNearestPoly(const float* center, const float* extents, const dtQueryFilter* filter, dtPolyRef* nearestRef, float* nearestPt) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findNearestPoly

#ifndef STUB_dtNavMeshQuery_queryPolygons
//#define STUB_dtNavMeshQuery_queryPolygons
  dtStatus dtNavMeshQuery::queryPolygons(const float* center, const float* extents, const dtQueryFilter* filter, dtPolyRef* polys, int* polyCount, const int maxPolys) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_queryPolygons

#ifndef STUB_dtNavMeshQuery_findLocalNeighbourhood
//#define STUB_dtNavMeshQuery_findLocalNeighbourhood
  dtStatus dtNavMeshQuery::findLocalNeighbourhood(dtPolyRef startRef, const float* centerPos, const float radius, const dtQueryFilter* filter, dtPolyRef* resultRef, dtPolyRef* resultParent, int* resultCount, const int maxResult) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findLocalNeighbourhood

#ifndef STUB_dtNavMeshQuery_moveAlongSurface
//#define STUB_dtNavMeshQuery_moveAlongSurface
  dtStatus dtNavMeshQuery::moveAlongSurface(dtPolyRef startRef, const float* startPos, const float* endPos, const dtQueryFilter* filter, float* resultPos, dtPolyRef* visited, int* visitedCount, const int maxVisitedSize) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_moveAlongSurface

#ifndef STUB_dtNavMeshQuery_raycast
//#define STUB_dtNavMeshQuery_raycast
  dtStatus dtNavMeshQuery::raycast(dtPolyRef startRef, const float* startPos, const float* endPos, const dtQueryFilter* filter, float* t, float* hitNormal, dtPolyRef* path, int* pathCount, const int maxPath) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_raycast

#ifndef STUB_dtNavMeshQuery_findDistanceToWall
//#define STUB_dtNavMeshQuery_findDistanceToWall
  dtStatus dtNavMeshQuery::findDistanceToWall(dtPolyRef startRef, const float* centerPos, const float maxRadius, const dtQueryFilter* filter, float* hitDist, float* hitPos, float* hitNormal) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findDistanceToWall

#ifndef STUB_dtNavMeshQuery_getPolyWallSegments
//#define STUB_dtNavMeshQuery_getPolyWallSegments
  dtStatus dtNavMeshQuery::getPolyWallSegments(dtPolyRef ref, const dtQueryFilter* filter, float* segmentVerts, dtPolyRef* segmentRefs, int* segmentCount, const int maxSegments) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_getPolyWallSegments

#ifndef STUB_dtNavMeshQuery_findRandomPoint
//#define STUB_dtNavMeshQuery_findRandomPoint
  dtStatus dtNavMeshQuery::findRandomPoint(const dtQueryFilter* filter, float (*frand)(), dtPolyRef* randomRef, float* randomPt) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findRandomPoint

#ifndef STUB_dtNavMeshQuery_findRandomPointAroundCircle
//#define STUB_dtNavMeshQuery_findRandomPointAroundCircle
  dtStatus dtNavMeshQuery::findRandomPointAroundCircle(dtPolyRef startRef, const float* centerPos, const float maxRadius, const dtQueryFilter* filter, float (*frand)(), dtPolyRef* randomRef, float* randomPt) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_findRandomPointAroundCircle

#ifndef STUB_dtNavMeshQuery_closestPointOnPoly
//#define STUB_dtNavMeshQuery_closestPointOnPoly
  dtStatus dtNavMeshQuery::closestPointOnPoly(dtPolyRef ref, const float* pos, float* closest, bool* posOverPoly) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_closestPointOnPoly

#ifndef STUB_dtNavMeshQuery_closestPointOnPolyBoundary
//#define STUB_dtNavMeshQuery_closestPointOnPolyBoundary
  dtStatus dtNavMeshQuery::closestPointOnPolyBoundary(dtPolyRef ref, const float* pos, float* closest) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_closestPointOnPolyBoundary

#ifndef STUB_dtNavMeshQuery_getPolyHeight
//#define STUB_dtNavMeshQuery_getPolyHeight
  dtStatus dtNavMeshQuery::getPolyHeight(dtPolyRef ref, const float* pos, float* height) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_getPolyHeight

#ifndef STUB_dtNavMeshQuery_isValidPolyRef
//#define STUB_dtNavMeshQuery_isValidPolyRef
  bool dtNavMeshQuery::isValidPolyRef(dtPolyRef ref, const dtQueryFilter* filter) const
  {
    return false;
  }
#endif //STUB_dtNavMeshQuery_isValidPolyRef

#ifndef STUB_dtNavMeshQuery_isInClosedList
//#define STUB_dtNavMeshQuery_isInClosedList
  bool dtNavMeshQuery::isInClosedList(dtPolyRef ref) const
  {
    return false;
  }
#endif //STUB_dtNavMeshQuery_isInClosedList

#ifndef STUB_dtNavMeshQuery_getNeighbourTileAt
//#define STUB_dtNavMeshQuery_getNeighbourTileAt
  dtMeshTile* dtNavMeshQuery::getNeighbourTileAt(int x, int y, int side) const
  {
    return nullptr;
  }
#endif //STUB_dtNavMeshQuery_getNeighbourTileAt

#ifndef STUB_dtNavMeshQuery_queryPolygonsInTile
//#define STUB_dtNavMeshQuery_queryPolygonsInTile
  int dtNavMeshQuery::queryPolygonsInTile(const dtMeshTile* tile, const float* qmin, const float* qmax, const dtQueryFilter* filter, dtPolyRef* polys, const int maxPolys) const
  {
    return 0;
  }
#endif //STUB_dtNavMeshQuery_queryPolygonsInTile

#ifndef STUB_dtNavMeshQuery_getPortalPoints
//#define STUB_dtNavMeshQuery_getPortalPoints
  dtStatus dtNavMeshQuery::getPortalPoints(dtPolyRef from, dtPolyRef to, float* left, float* right, unsigned char& fromType, unsigned char& toType) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_getPortalPoints

#ifndef STUB_dtNavMeshQuery_getPortalPoints
//#define STUB_dtNavMeshQuery_getPortalPoints
  dtStatus dtNavMeshQuery::getPortalPoints(dtPolyRef from, const dtPoly* fromPoly, const dtMeshTile* fromTile, dtPolyRef to, const dtPoly* toPoly, const dtMeshTile* toTile, float* left, float* right) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_getPortalPoints

#ifndef STUB_dtNavMeshQuery_getEdgeMidPoint
//#define STUB_dtNavMeshQuery_getEdgeMidPoint
  dtStatus dtNavMeshQuery::getEdgeMidPoint(dtPolyRef from, dtPolyRef to, float* mid) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_getEdgeMidPoint

#ifndef STUB_dtNavMeshQuery_getEdgeMidPoint
//#define STUB_dtNavMeshQuery_getEdgeMidPoint
  dtStatus dtNavMeshQuery::getEdgeMidPoint(dtPolyRef from, const dtPoly* fromPoly, const dtMeshTile* fromTile, dtPolyRef to, const dtPoly* toPoly, const dtMeshTile* toTile, float* mid) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_getEdgeMidPoint

#ifndef STUB_dtNavMeshQuery_appendVertex
//#define STUB_dtNavMeshQuery_appendVertex
  dtStatus dtNavMeshQuery::appendVertex(const float* pos, const unsigned char flags, const dtPolyRef ref, float* straightPath, unsigned char* straightPathFlags, dtPolyRef* straightPathRefs, int* straightPathCount, const int maxStraightPath) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_appendVertex

#ifndef STUB_dtNavMeshQuery_appendPortals
//#define STUB_dtNavMeshQuery_appendPortals
  dtStatus dtNavMeshQuery::appendPortals(const int startIdx, const int endIdx, const float* endPos, const dtPolyRef* path, float* straightPath, unsigned char* straightPathFlags, dtPolyRef* straightPathRefs, int* straightPathCount, const int maxStraightPath, const int options) const
  {
    return *static_cast<dtStatus*>(nullptr);
  }
#endif //STUB_dtNavMeshQuery_appendPortals


#endif