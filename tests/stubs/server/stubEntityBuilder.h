// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubEntityBuilder_custom.h file.

#include "server/EntityBuilder.h"
#include "stubEntityBuilder_custom.h"

#ifndef STUB_SERVER_ENTITYBUILDER_H
#define STUB_SERVER_ENTITYBUILDER_H

#ifndef STUB_EntityBuilder_EntityBuilder
//#define STUB_EntityBuilder_EntityBuilder
   EntityBuilder::EntityBuilder()
  {
    
  }
#endif //STUB_EntityBuilder_EntityBuilder

#ifndef STUB_EntityBuilder_EntityBuilder_DTOR
//#define STUB_EntityBuilder_EntityBuilder_DTOR
   EntityBuilder::~EntityBuilder()
  {
    
  }
#endif //STUB_EntityBuilder_EntityBuilder_DTOR

#ifndef STUB_EntityBuilder_installBaseFactory
//#define STUB_EntityBuilder_installBaseFactory
  void EntityBuilder::installBaseFactory(const std::string & class_name, const std::string & parent, EntityKit * factory)
  {
    
  }
#endif //STUB_EntityBuilder_installBaseFactory

#ifndef STUB_EntityBuilder_installFactory
//#define STUB_EntityBuilder_installFactory
  int EntityBuilder::installFactory(const std::string & class_name, const Atlas::Objects::Root & class_desc, EntityKit * factory)
  {
    return 0;
  }
#endif //STUB_EntityBuilder_installFactory

#ifndef STUB_EntityBuilder_getClassFactory
//#define STUB_EntityBuilder_getClassFactory
  EntityKit* EntityBuilder::getClassFactory(const std::string & class_name)
  {
    return nullptr;
  }
#endif //STUB_EntityBuilder_getClassFactory

#ifndef STUB_EntityBuilder_newEntity
//#define STUB_EntityBuilder_newEntity
  LocatedEntity* EntityBuilder::newEntity(const std::string & id, long intId, const std::string & type, const Atlas::Objects::Entity::RootEntity & attrs, const BaseWorld & world) const
  {
    return nullptr;
  }
#endif //STUB_EntityBuilder_newEntity

#ifndef STUB_EntityBuilder_newChildEntity
//#define STUB_EntityBuilder_newChildEntity
  LocatedEntity* EntityBuilder::newChildEntity(const std::string & id, long intId, const std::string & type, const Atlas::Objects::Entity::RootEntity & attrs, LocatedEntity & parentEntity) const
  {
    return nullptr;
  }
#endif //STUB_EntityBuilder_newChildEntity

#ifndef STUB_EntityBuilder_flushFactories
//#define STUB_EntityBuilder_flushFactories
  void EntityBuilder::flushFactories()
  {
    
  }
#endif //STUB_EntityBuilder_flushFactories

#ifndef STUB_EntityBuilder_isTask
//#define STUB_EntityBuilder_isTask
  bool EntityBuilder::isTask(const std::string & class_name)
  {
    return false;
  }
#endif //STUB_EntityBuilder_isTask

#ifndef STUB_EntityBuilder_hasTask
//#define STUB_EntityBuilder_hasTask
  bool EntityBuilder::hasTask(const std::string & class_name)
  {
    return false;
  }
#endif //STUB_EntityBuilder_hasTask

#ifndef STUB_EntityBuilder_buildTask
//#define STUB_EntityBuilder_buildTask
  Task* EntityBuilder::buildTask(TaskKit * factory, LocatedEntity & owner) const
  {
    return nullptr;
  }
#endif //STUB_EntityBuilder_buildTask

#ifndef STUB_EntityBuilder_newTask
//#define STUB_EntityBuilder_newTask
  Task* EntityBuilder::newTask(const std::string & class_name, LocatedEntity & owner) const
  {
    return nullptr;
  }
#endif //STUB_EntityBuilder_newTask

#ifndef STUB_EntityBuilder_installTaskFactory
//#define STUB_EntityBuilder_installTaskFactory
  void EntityBuilder::installTaskFactory(const std::string & class_name, TaskKit * factory)
  {
    
  }
#endif //STUB_EntityBuilder_installTaskFactory

#ifndef STUB_EntityBuilder_getTaskFactory
//#define STUB_EntityBuilder_getTaskFactory
  TaskKit* EntityBuilder::getTaskFactory(const std::string & class_name)
  {
    return nullptr;
  }
#endif //STUB_EntityBuilder_getTaskFactory

#ifndef STUB_EntityBuilder_addTaskActivation
//#define STUB_EntityBuilder_addTaskActivation
  void EntityBuilder::addTaskActivation(const std::string & tool, const std::string & op, TaskKit * factory)
  {
    
  }
#endif //STUB_EntityBuilder_addTaskActivation

#ifndef STUB_EntityBuilder_activateTask
//#define STUB_EntityBuilder_activateTask
  Task* EntityBuilder::activateTask(const std::string & tool, const std::string & op, LocatedEntity * target, LocatedEntity & owner) const
  {
    return nullptr;
  }
#endif //STUB_EntityBuilder_activateTask


#endif