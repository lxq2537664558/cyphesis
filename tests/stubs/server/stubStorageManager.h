// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubStorageManager_custom.h file.

#include "server/StorageManager.h"
#include "stubStorageManager_custom.h"

#ifndef STUB_SERVER_STORAGEMANAGER_H
#define STUB_SERVER_STORAGEMANAGER_H

#ifndef STUB_StorageManager_entityInserted
//#define STUB_StorageManager_entityInserted
  void StorageManager::entityInserted(LocatedEntity *)
  {
    
  }
#endif //STUB_StorageManager_entityInserted

#ifndef STUB_StorageManager_entityUpdated
//#define STUB_StorageManager_entityUpdated
  void StorageManager::entityUpdated(LocatedEntity *)
  {
    
  }
#endif //STUB_StorageManager_entityUpdated

#ifndef STUB_StorageManager_entityContainered
//#define STUB_StorageManager_entityContainered
  void StorageManager::entityContainered(const LocatedEntity *oldLocation, LocatedEntity *entity)
  {
    
  }
#endif //STUB_StorageManager_entityContainered

#ifndef STUB_StorageManager_encodeProperty
//#define STUB_StorageManager_encodeProperty
  void StorageManager::encodeProperty(PropertyBase *, std::string &)
  {
    
  }
#endif //STUB_StorageManager_encodeProperty

#ifndef STUB_StorageManager_restorePropertiesRecursively
//#define STUB_StorageManager_restorePropertiesRecursively
  void StorageManager::restorePropertiesRecursively(LocatedEntity *)
  {
    
  }
#endif //STUB_StorageManager_restorePropertiesRecursively

#ifndef STUB_StorageManager_restoreThoughts
//#define STUB_StorageManager_restoreThoughts
  void StorageManager::restoreThoughts(LocatedEntity *)
  {
    
  }
#endif //STUB_StorageManager_restoreThoughts

#ifndef STUB_StorageManager_storeThoughts
//#define STUB_StorageManager_storeThoughts
  bool StorageManager::storeThoughts(LocatedEntity *)
  {
    return false;
  }
#endif //STUB_StorageManager_storeThoughts

#ifndef STUB_StorageManager_insertEntity
//#define STUB_StorageManager_insertEntity
  void StorageManager::insertEntity(LocatedEntity *)
  {
    
  }
#endif //STUB_StorageManager_insertEntity

#ifndef STUB_StorageManager_updateEntity
//#define STUB_StorageManager_updateEntity
  void StorageManager::updateEntity(LocatedEntity *)
  {
    
  }
#endif //STUB_StorageManager_updateEntity

#ifndef STUB_StorageManager_updateEntityThoughts
//#define STUB_StorageManager_updateEntityThoughts
  void StorageManager::updateEntityThoughts(LocatedEntity *)
  {
    
  }
#endif //STUB_StorageManager_updateEntityThoughts

#ifndef STUB_StorageManager_restoreChildren
//#define STUB_StorageManager_restoreChildren
  void StorageManager::restoreChildren(LocatedEntity *)
  {
    
  }
#endif //STUB_StorageManager_restoreChildren

#ifndef STUB_StorageManager_thoughtsReceived
//#define STUB_StorageManager_thoughtsReceived
  void StorageManager::thoughtsReceived(const std::string& entityId, const Operation& thoughts)
  {
    
  }
#endif //STUB_StorageManager_thoughtsReceived

#ifndef STUB_StorageManager_persistance_characterAdded
//#define STUB_StorageManager_persistance_characterAdded
  bool StorageManager::persistance_characterAdded(const Persistence::AddCharacterData& data)
  {
    return false;
  }
#endif //STUB_StorageManager_persistance_characterAdded

#ifndef STUB_StorageManager_persistance_characterDeleted
//#define STUB_StorageManager_persistance_characterDeleted
  bool StorageManager::persistance_characterDeleted(const std::string& entityId)
  {
    return false;
  }
#endif //STUB_StorageManager_persistance_characterDeleted

#ifndef STUB_StorageManager_StorageManager
//#define STUB_StorageManager_StorageManager
   StorageManager::StorageManager(WorldRouter &)
    : sigc::trackable(WorldRouter)
    , m_mindInspector(nullptr)
  {
    
  }
#endif //STUB_StorageManager_StorageManager

#ifndef STUB_StorageManager_StorageManager_DTOR
//#define STUB_StorageManager_StorageManager_DTOR
   StorageManager::~StorageManager()
  {
    
  }
#endif //STUB_StorageManager_StorageManager_DTOR

#ifndef STUB_StorageManager_tick
//#define STUB_StorageManager_tick
  void StorageManager::tick()
  {
    
  }
#endif //STUB_StorageManager_tick

#ifndef STUB_StorageManager_initWorld
//#define STUB_StorageManager_initWorld
  int StorageManager::initWorld()
  {
    return 0;
  }
#endif //STUB_StorageManager_initWorld

#ifndef STUB_StorageManager_restoreWorld
//#define STUB_StorageManager_restoreWorld
  int StorageManager::restoreWorld()
  {
    return 0;
  }
#endif //STUB_StorageManager_restoreWorld

#ifndef STUB_StorageManager_shutdown
//#define STUB_StorageManager_shutdown
  int StorageManager::shutdown(bool& exit_flag, const std::map<long, LocatedEntity *>& entites)
  {
    return 0;
  }
#endif //STUB_StorageManager_shutdown

#ifndef STUB_StorageManager_requestMinds
//#define STUB_StorageManager_requestMinds
  size_t StorageManager::requestMinds(const std::map<long, LocatedEntity *>& entites)
  {
    return 0;
  }
#endif //STUB_StorageManager_requestMinds

#ifndef STUB_StorageManager_numberOfOutstandingThoughtRequests
//#define STUB_StorageManager_numberOfOutstandingThoughtRequests
  size_t StorageManager::numberOfOutstandingThoughtRequests() const
  {
    return 0;
  }
#endif //STUB_StorageManager_numberOfOutstandingThoughtRequests


#endif