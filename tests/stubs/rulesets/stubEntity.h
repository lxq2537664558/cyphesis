// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubEntity_custom.h file.

#include "rulesets/Entity.h"
#include "stubEntity_custom.h"

#ifndef STUB_RULESETS_ENTITY_H
#define STUB_RULESETS_ENTITY_H

#ifndef STUB_Entity_Entity
//#define STUB_Entity_Entity
   Entity::Entity(const std::string & id, long intId)
    : LocatedEntity(id, intId)
  {
    
  }
#endif

#ifndef STUB_Entity_Entity
//#define STUB_Entity_Entity
   Entity::~Entity()
  {
    
  }
#endif

#ifndef STUB_Entity_setType
//#define STUB_Entity_setType
  void Entity::setType(const TypeNode * t)
  {
    
  }
#endif

#ifndef STUB_Entity_setAttr
//#define STUB_Entity_setAttr
  PropertyBase* Entity::setAttr(const std::string & name, const Atlas::Message::Element &)
  {
    return nullptr;
  }
#endif

#ifndef STUB_Entity_getProperty
//#define STUB_Entity_getProperty
  const PropertyBase* Entity::getProperty(const std::string & name) const
  {
    return nullptr;
  }
#endif

#ifndef STUB_Entity_modProperty
//#define STUB_Entity_modProperty
  PropertyBase* Entity::modProperty(const std::string & name)
  {
    return nullptr;
  }
#endif

#ifndef STUB_Entity_setProperty
//#define STUB_Entity_setProperty
  PropertyBase* Entity::setProperty(const std::string & name, PropertyBase * prop)
  {
    return nullptr;
  }
#endif

#ifndef STUB_Entity_addToMessage
//#define STUB_Entity_addToMessage
  void Entity::addToMessage(Atlas::Message::MapType &) const
  {
    
  }
#endif

#ifndef STUB_Entity_addToEntity
//#define STUB_Entity_addToEntity
  void Entity::addToEntity(const Atlas::Objects::Entity::RootEntity &) const
  {
    
  }
#endif

#ifndef STUB_Entity_ActuateOperation
//#define STUB_Entity_ActuateOperation
  void Entity::ActuateOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_AppearanceOperation
//#define STUB_Entity_AppearanceOperation
  void Entity::AppearanceOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_AttackOperation
//#define STUB_Entity_AttackOperation
  void Entity::AttackOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_CombineOperation
//#define STUB_Entity_CombineOperation
  void Entity::CombineOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_CreateOperation
//#define STUB_Entity_CreateOperation
  void Entity::CreateOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_DeleteOperation
//#define STUB_Entity_DeleteOperation
  void Entity::DeleteOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_DisappearanceOperation
//#define STUB_Entity_DisappearanceOperation
  void Entity::DisappearanceOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_DivideOperation
//#define STUB_Entity_DivideOperation
  void Entity::DivideOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_EatOperation
//#define STUB_Entity_EatOperation
  void Entity::EatOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_GetOperation
//#define STUB_Entity_GetOperation
  void Entity::GetOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_ImaginaryOperation
//#define STUB_Entity_ImaginaryOperation
  void Entity::ImaginaryOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_InfoOperation
//#define STUB_Entity_InfoOperation
  void Entity::InfoOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_LookOperation
//#define STUB_Entity_LookOperation
  void Entity::LookOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_MoveOperation
//#define STUB_Entity_MoveOperation
  void Entity::MoveOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_NourishOperation
//#define STUB_Entity_NourishOperation
  void Entity::NourishOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_SetOperation
//#define STUB_Entity_SetOperation
  void Entity::SetOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_SightOperation
//#define STUB_Entity_SightOperation
  void Entity::SightOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_SoundOperation
//#define STUB_Entity_SoundOperation
  void Entity::SoundOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_TalkOperation
//#define STUB_Entity_TalkOperation
  void Entity::TalkOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_TickOperation
//#define STUB_Entity_TickOperation
  void Entity::TickOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_TouchOperation
//#define STUB_Entity_TouchOperation
  void Entity::TouchOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_UpdateOperation
//#define STUB_Entity_UpdateOperation
  void Entity::UpdateOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_UseOperation
//#define STUB_Entity_UseOperation
  void Entity::UseOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_WieldOperation
//#define STUB_Entity_WieldOperation
  void Entity::WieldOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_RelayOperation
//#define STUB_Entity_RelayOperation
  void Entity::RelayOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_externalOperation
//#define STUB_Entity_externalOperation
  void Entity::externalOperation(const Operation & op, Link &)
  {
    
  }
#endif

#ifndef STUB_Entity_operation
//#define STUB_Entity_operation
  void Entity::operation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_callDelegate
//#define STUB_Entity_callDelegate
  HandlerResult Entity::callDelegate(const std::string &, const Operation &, OpVector &)
  {
    return *static_cast<HandlerResult*>(nullptr);
  }
#endif

#ifndef STUB_Entity_callOperation
//#define STUB_Entity_callOperation
  void Entity::callOperation(const Operation &, OpVector &)
  {
    
  }
#endif

#ifndef STUB_Entity_installDelegate
//#define STUB_Entity_installDelegate
  void Entity::installDelegate(int, const std::string &)
  {
    
  }
#endif

#ifndef STUB_Entity_removeDelegate
//#define STUB_Entity_removeDelegate
  void Entity::removeDelegate(int, const std::string &)
  {
    
  }
#endif

#ifndef STUB_Entity_addChild
//#define STUB_Entity_addChild
  void Entity::addChild(LocatedEntity& childEntity)
  {
    
  }
#endif

#ifndef STUB_Entity_removeChild
//#define STUB_Entity_removeChild
  void Entity::removeChild(LocatedEntity& childEntity)
  {
    
  }
#endif

#ifndef STUB_Entity_onContainered
//#define STUB_Entity_onContainered
  void Entity::onContainered(const LocatedEntity* oldLocation)
  {
    
  }
#endif

#ifndef STUB_Entity_onUpdated
//#define STUB_Entity_onUpdated
  void Entity::onUpdated()
  {
    
  }
#endif

#ifndef STUB_Entity_destroy
//#define STUB_Entity_destroy
  void Entity::destroy()
  {
    
  }
#endif

#ifndef STUB_Entity_getDomain
//#define STUB_Entity_getDomain
  Domain* Entity::getDomain()
  {
    return nullptr;
  }
#endif

#ifndef STUB_Entity_getDomain
//#define STUB_Entity_getDomain
  const Domain* Entity::getDomain() const
  {
    return nullptr;
  }
#endif

#ifndef STUB_Entity_sendWorld
//#define STUB_Entity_sendWorld
  void Entity::sendWorld(const Operation & op)
  {
    
  }
#endif


#endif