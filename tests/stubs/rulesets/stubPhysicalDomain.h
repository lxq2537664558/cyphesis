// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubPhysicalDomain_custom.h file.

#include "rulesets/PhysicalDomain.h"
#include "stubPhysicalDomain_custom.h"

#ifndef STUB_RULESETS_PHYSICALDOMAIN_H
#define STUB_RULESETS_PHYSICALDOMAIN_H

#ifndef STUB_PhysicalDomain_PhysicalDomain
//#define STUB_PhysicalDomain_PhysicalDomain
   PhysicalDomain::PhysicalDomain(LocatedEntity& entity)
    : Domain(entity)
  {
    
  }
#endif //STUB_PhysicalDomain_PhysicalDomain

#ifndef STUB_PhysicalDomain_PhysicalDomain_DTOR
//#define STUB_PhysicalDomain_PhysicalDomain_DTOR
   PhysicalDomain::~PhysicalDomain()
  {
    
  }
#endif //STUB_PhysicalDomain_PhysicalDomain_DTOR

#ifndef STUB_PhysicalDomain_tick
//#define STUB_PhysicalDomain_tick
  void PhysicalDomain::tick(double t, OpVector& res)
  {
    
  }
#endif //STUB_PhysicalDomain_tick

#ifndef STUB_PhysicalDomain_isEntityVisibleFor
//#define STUB_PhysicalDomain_isEntityVisibleFor
  bool PhysicalDomain::isEntityVisibleFor(const LocatedEntity& observingEntity, const LocatedEntity& observedEntity) const
  {
    return false;
  }
#endif //STUB_PhysicalDomain_isEntityVisibleFor

#ifndef STUB_PhysicalDomain_getVisibleEntitiesFor
//#define STUB_PhysicalDomain_getVisibleEntitiesFor
  void PhysicalDomain::getVisibleEntitiesFor(const LocatedEntity& observingEntity, std::list<LocatedEntity*>& entityList) const
  {
    
  }
#endif //STUB_PhysicalDomain_getVisibleEntitiesFor

#ifndef STUB_PhysicalDomain_getObservingEntitiesFor
//#define STUB_PhysicalDomain_getObservingEntitiesFor
  std::list<LocatedEntity*> PhysicalDomain::getObservingEntitiesFor(const LocatedEntity& observedEntity) const
  {
    return std::list<LocatedEntity*>();
  }
#endif //STUB_PhysicalDomain_getObservingEntitiesFor

#ifndef STUB_PhysicalDomain_addEntity
//#define STUB_PhysicalDomain_addEntity
  void PhysicalDomain::addEntity(LocatedEntity& entity)
  {
    
  }
#endif //STUB_PhysicalDomain_addEntity

#ifndef STUB_PhysicalDomain_removeEntity
//#define STUB_PhysicalDomain_removeEntity
  void PhysicalDomain::removeEntity(LocatedEntity& entity)
  {
    
  }
#endif //STUB_PhysicalDomain_removeEntity

#ifndef STUB_PhysicalDomain_applyTransform
//#define STUB_PhysicalDomain_applyTransform
  void PhysicalDomain::applyTransform(LocatedEntity& entity, const WFMath::Quaternion& orientation, const WFMath::Point<3>& pos, const WFMath::Vector<3>& velocity)
  {
    
  }
#endif //STUB_PhysicalDomain_applyTransform

#ifndef STUB_PhysicalDomain_refreshTerrain
//#define STUB_PhysicalDomain_refreshTerrain
  void PhysicalDomain::refreshTerrain(const std::vector<WFMath::AxisBox<2>>& areas)
  {
    
  }
#endif //STUB_PhysicalDomain_refreshTerrain

#ifndef STUB_PhysicalDomain_toggleChildPerception
//#define STUB_PhysicalDomain_toggleChildPerception
  void PhysicalDomain::toggleChildPerception(LocatedEntity& entity)
  {
    
  }
#endif //STUB_PhysicalDomain_toggleChildPerception

#ifndef STUB_PhysicalDomain_createDomainBorders
//#define STUB_PhysicalDomain_createDomainBorders
  void PhysicalDomain::createDomainBorders()
  {
    
  }
#endif //STUB_PhysicalDomain_createDomainBorders

#ifndef STUB_PhysicalDomain_buildTerrainPages
//#define STUB_PhysicalDomain_buildTerrainPages
  void PhysicalDomain::buildTerrainPages()
  {
    
  }
#endif //STUB_PhysicalDomain_buildTerrainPages

#ifndef STUB_PhysicalDomain_buildTerrainPage
//#define STUB_PhysicalDomain_buildTerrainPage
  void PhysicalDomain::buildTerrainPage(Mercator::Segment& segment, float friction)
  {
    
  }
#endif //STUB_PhysicalDomain_buildTerrainPage

#ifndef STUB_PhysicalDomain_childEntityPropertyApplied
//#define STUB_PhysicalDomain_childEntityPropertyApplied
  void PhysicalDomain::childEntityPropertyApplied(const std::string& name, PropertyBase& prop, BulletEntry* bulletEntry)
  {
    
  }
#endif //STUB_PhysicalDomain_childEntityPropertyApplied

#ifndef STUB_PhysicalDomain_entityPropertyApplied
//#define STUB_PhysicalDomain_entityPropertyApplied
  void PhysicalDomain::entityPropertyApplied(const std::string& name, PropertyBase& prop)
  {
    
  }
#endif //STUB_PhysicalDomain_entityPropertyApplied

#ifndef STUB_PhysicalDomain_getMassForEntity
//#define STUB_PhysicalDomain_getMassForEntity
  float PhysicalDomain::getMassForEntity(const LocatedEntity& entity) const
  {
    return 0;
  }
#endif //STUB_PhysicalDomain_getMassForEntity

#ifndef STUB_PhysicalDomain_getCollisionFlagsForEntity
//#define STUB_PhysicalDomain_getCollisionFlagsForEntity
  void PhysicalDomain::getCollisionFlagsForEntity(const LocatedEntity& entity, short& collisionGroup, short& collisionMask) const
  {
    
  }
#endif //STUB_PhysicalDomain_getCollisionFlagsForEntity

#ifndef STUB_PhysicalDomain_sendMoveSight
//#define STUB_PhysicalDomain_sendMoveSight
  void PhysicalDomain::sendMoveSight(BulletEntry& bulletEntry, bool posChange, bool velocityChange, bool orientationChange, bool angularChange)
  {
    
  }
#endif //STUB_PhysicalDomain_sendMoveSight

#ifndef STUB_PhysicalDomain_processMovedEntity
//#define STUB_PhysicalDomain_processMovedEntity
  void PhysicalDomain::processMovedEntity(BulletEntry& bulletEntry)
  {
    
  }
#endif //STUB_PhysicalDomain_processMovedEntity

#ifndef STUB_PhysicalDomain_updateVisibilityOfDirtyEntities
//#define STUB_PhysicalDomain_updateVisibilityOfDirtyEntities
  void PhysicalDomain::updateVisibilityOfDirtyEntities(OpVector& res)
  {
    
  }
#endif //STUB_PhysicalDomain_updateVisibilityOfDirtyEntities

#ifndef STUB_PhysicalDomain_updateObservedEntry
//#define STUB_PhysicalDomain_updateObservedEntry
  void PhysicalDomain::updateObservedEntry(BulletEntry* entry, OpVector& res, bool generateOps )
  {
    
  }
#endif //STUB_PhysicalDomain_updateObservedEntry

#ifndef STUB_PhysicalDomain_updateObserverEntry
//#define STUB_PhysicalDomain_updateObserverEntry
  void PhysicalDomain::updateObserverEntry(BulletEntry* bulletEntry, OpVector& res)
  {
    
  }
#endif //STUB_PhysicalDomain_updateObserverEntry

#ifndef STUB_PhysicalDomain_applyNewPositionForEntity
//#define STUB_PhysicalDomain_applyNewPositionForEntity
  void PhysicalDomain::applyNewPositionForEntity(BulletEntry* entry, const WFMath::Point<3>& pos)
  {
    
  }
#endif //STUB_PhysicalDomain_applyNewPositionForEntity

#ifndef STUB_PhysicalDomain_getTerrainHeight
//#define STUB_PhysicalDomain_getTerrainHeight
  bool PhysicalDomain::getTerrainHeight(float x, float y, float& height) const
  {
    return false;
  }
#endif //STUB_PhysicalDomain_getTerrainHeight

#ifndef STUB_PhysicalDomain_updateTerrainMod
//#define STUB_PhysicalDomain_updateTerrainMod
  void PhysicalDomain::updateTerrainMod(const LocatedEntity& entity, bool forceUpdate )
  {
    
  }
#endif //STUB_PhysicalDomain_updateTerrainMod

#ifndef STUB_PhysicalDomain_processDirtyTerrainAreas
//#define STUB_PhysicalDomain_processDirtyTerrainAreas
  void PhysicalDomain::processDirtyTerrainAreas()
  {
    
  }
#endif //STUB_PhysicalDomain_processDirtyTerrainAreas

#ifndef STUB_PhysicalDomain_applyVelocity
//#define STUB_PhysicalDomain_applyVelocity
  void PhysicalDomain::applyVelocity(BulletEntry& entry, const WFMath::Vector<3>& velocity)
  {
    
  }
#endif //STUB_PhysicalDomain_applyVelocity

#ifndef STUB_PhysicalDomain_calculatePositionForEntity
//#define STUB_PhysicalDomain_calculatePositionForEntity
  void PhysicalDomain::calculatePositionForEntity(ModeProperty::Mode mode, LocatedEntity& entity, WFMath::Point<3>& pos)
  {
    
  }
#endif //STUB_PhysicalDomain_calculatePositionForEntity


#endif