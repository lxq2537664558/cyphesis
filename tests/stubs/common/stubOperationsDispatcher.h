// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubOperationsDispatcher_custom.h file.

#include "common/OperationsDispatcher.h"
#include "stubOperationsDispatcher_custom.h"

#ifndef STUB_COMMON_OPERATIONSDISPATCHER_H
#define STUB_COMMON_OPERATIONSDISPATCHER_H

#ifndef STUB_OpQueEntry_OpQueEntry
//#define STUB_OpQueEntry_OpQueEntry
   OpQueEntry::OpQueEntry(const Operation & o, LocatedEntity & f)
    : from(nullptr)
  {
    
  }
#endif //STUB_OpQueEntry_OpQueEntry

#ifndef STUB_OpQueEntry_OpQueEntry
//#define STUB_OpQueEntry_OpQueEntry
   OpQueEntry::OpQueEntry(const OpQueEntry & o)
    : from(nullptr)
  {
    
  }
#endif //STUB_OpQueEntry_OpQueEntry

#ifndef STUB_OpQueEntry_OpQueEntry_DTOR
//#define STUB_OpQueEntry_OpQueEntry_DTOR
   OpQueEntry::~OpQueEntry()
  {
    
  }
#endif //STUB_OpQueEntry_OpQueEntry_DTOR


#ifndef STUB_OperationsDispatcher_OperationsDispatcher
//#define STUB_OperationsDispatcher_OperationsDispatcher
   OperationsDispatcher::OperationsDispatcher(const std::function<void(const Operation&, LocatedEntity&)>& operationProcessor, const std::function<double()>& timeProviderFn)
  {
    
  }
#endif //STUB_OperationsDispatcher_OperationsDispatcher

#ifndef STUB_OperationsDispatcher_OperationsDispatcher_DTOR
//#define STUB_OperationsDispatcher_OperationsDispatcher_DTOR
   OperationsDispatcher::~OperationsDispatcher()
  {
    
  }
#endif //STUB_OperationsDispatcher_OperationsDispatcher_DTOR

#ifndef STUB_OperationsDispatcher_idle
//#define STUB_OperationsDispatcher_idle
  bool OperationsDispatcher::idle()
  {
    return false;
  }
#endif //STUB_OperationsDispatcher_idle

#ifndef STUB_OperationsDispatcher_secondsUntilNextOp
//#define STUB_OperationsDispatcher_secondsUntilNextOp
  double OperationsDispatcher::secondsUntilNextOp() const
  {
    return 0;
  }
#endif //STUB_OperationsDispatcher_secondsUntilNextOp

#ifndef STUB_OperationsDispatcher_isQueueDirty
//#define STUB_OperationsDispatcher_isQueueDirty
  bool OperationsDispatcher::isQueueDirty() const
  {
    return false;
  }
#endif //STUB_OperationsDispatcher_isQueueDirty

#ifndef STUB_OperationsDispatcher_markQueueAsClean
//#define STUB_OperationsDispatcher_markQueueAsClean
  void OperationsDispatcher::markQueueAsClean()
  {
    
  }
#endif //STUB_OperationsDispatcher_markQueueAsClean

#ifndef STUB_OperationsDispatcher_clearQueues
//#define STUB_OperationsDispatcher_clearQueues
  void OperationsDispatcher::clearQueues()
  {
    
  }
#endif //STUB_OperationsDispatcher_clearQueues

#ifndef STUB_OperationsDispatcher_addOperationToQueue
//#define STUB_OperationsDispatcher_addOperationToQueue
  void OperationsDispatcher::addOperationToQueue(const Operation &, LocatedEntity &)
  {
    
  }
#endif //STUB_OperationsDispatcher_addOperationToQueue

#ifndef STUB_OperationsDispatcher_dispatchOperation
//#define STUB_OperationsDispatcher_dispatchOperation
  void OperationsDispatcher::dispatchOperation(const OpQueEntry& opQueueEntry)
  {
    
  }
#endif //STUB_OperationsDispatcher_dispatchOperation

#ifndef STUB_OperationsDispatcher_getTime
//#define STUB_OperationsDispatcher_getTime
  double OperationsDispatcher::getTime() const
  {
    return 0;
  }
#endif //STUB_OperationsDispatcher_getTime


#endif