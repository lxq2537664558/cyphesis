// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubAtlasStreamClient_custom.h file.

#include "common/AtlasStreamClient.h"
#include "stubAtlasStreamClient_custom.h"

#ifndef STUB_COMMON_ATLASSTREAMCLIENT_H
#define STUB_COMMON_ATLASSTREAMCLIENT_H

#ifndef STUB_StreamClientSocketBase_StreamClientSocketBase
//#define STUB_StreamClientSocketBase_StreamClientSocketBase
   StreamClientSocketBase::StreamClientSocketBase(boost::asio::io_service& io_service, std::function<void()>& dispatcher)
    : m_codec(nullptr),m_encoder(nullptr)
  {
    
  }
#endif //STUB_StreamClientSocketBase_StreamClientSocketBase

#ifndef STUB_StreamClientSocketBase_StreamClientSocketBase_DTOR
//#define STUB_StreamClientSocketBase_StreamClientSocketBase_DTOR
   StreamClientSocketBase::~StreamClientSocketBase()
  {
    
  }
#endif //STUB_StreamClientSocketBase_StreamClientSocketBase_DTOR

#ifndef STUB_StreamClientSocketBase_negotiate
//#define STUB_StreamClientSocketBase_negotiate
  int StreamClientSocketBase::negotiate(Atlas::Objects::ObjectsDecoder& decoder)
  {
    return 0;
  }
#endif //STUB_StreamClientSocketBase_negotiate

#ifndef STUB_StreamClientSocketBase_getIos
//#define STUB_StreamClientSocketBase_getIos
  std::iostream& StreamClientSocketBase::getIos()
  {
    return *static_cast<std::iostream*>(nullptr);
  }
#endif //STUB_StreamClientSocketBase_getIos

#ifndef STUB_StreamClientSocketBase_getCodec
//#define STUB_StreamClientSocketBase_getCodec
  Atlas::Codec& StreamClientSocketBase::getCodec()
  {
    return *static_cast<Atlas::Codec*>(nullptr);
  }
#endif //STUB_StreamClientSocketBase_getCodec

#ifndef STUB_StreamClientSocketBase_getEncoder
//#define STUB_StreamClientSocketBase_getEncoder
  Atlas::Objects::ObjectsEncoder& StreamClientSocketBase::getEncoder()
  {
    return *static_cast<Atlas::Objects::ObjectsEncoder*>(nullptr);
  }
#endif //STUB_StreamClientSocketBase_getEncoder

#ifndef STUB_StreamClientSocketBase_write
//#define STUB_StreamClientSocketBase_write
  size_t StreamClientSocketBase::write()
  {
    return 0;
  }
#endif //STUB_StreamClientSocketBase_write

#ifndef STUB_StreamClientSocketBase_poll
//#define STUB_StreamClientSocketBase_poll
  int StreamClientSocketBase::poll(const boost::posix_time::time_duration& duration)
  {
    return 0;
  }
#endif //STUB_StreamClientSocketBase_poll

#ifndef STUB_StreamClientSocketBase_poll
//#define STUB_StreamClientSocketBase_poll
  int StreamClientSocketBase::poll(const boost::posix_time::time_duration& duration, const std::function<bool()> exitCheckerFn)
  {
    return 0;
  }
#endif //STUB_StreamClientSocketBase_poll

#ifndef STUB_StreamClientSocketBase_read_blocking
//#define STUB_StreamClientSocketBase_read_blocking
  size_t StreamClientSocketBase::read_blocking()
  {
    return 0;
  }
#endif //STUB_StreamClientSocketBase_read_blocking

#ifndef STUB_StreamClientSocketBase_do_read
//#define STUB_StreamClientSocketBase_do_read
  void StreamClientSocketBase::do_read()
  {
    
  }
#endif //STUB_StreamClientSocketBase_do_read


#ifndef STUB_TcpStreamClientSocket_TcpStreamClientSocket
//#define STUB_TcpStreamClientSocket_TcpStreamClientSocket
   TcpStreamClientSocket::TcpStreamClientSocket(boost::asio::io_service& io_service, std::function<void()>& dispatcher, boost::asio::ip::tcp::endpoint endpoint)
    : StreamClientSocketBase(io_service, dispatcher, endpoint)
  {
    
  }
#endif //STUB_TcpStreamClientSocket_TcpStreamClientSocket

#ifndef STUB_TcpStreamClientSocket_write
//#define STUB_TcpStreamClientSocket_write
  size_t TcpStreamClientSocket::write()
  {
    return 0;
  }
#endif //STUB_TcpStreamClientSocket_write

#ifndef STUB_TcpStreamClientSocket_read_blocking
//#define STUB_TcpStreamClientSocket_read_blocking
  size_t TcpStreamClientSocket::read_blocking()
  {
    return 0;
  }
#endif //STUB_TcpStreamClientSocket_read_blocking

#ifndef STUB_TcpStreamClientSocket_do_read
//#define STUB_TcpStreamClientSocket_do_read
  void TcpStreamClientSocket::do_read()
  {
    
  }
#endif //STUB_TcpStreamClientSocket_do_read


#ifndef STUB_LocalStreamClientSocket_LocalStreamClientSocket
//#define STUB_LocalStreamClientSocket_LocalStreamClientSocket
   LocalStreamClientSocket::LocalStreamClientSocket(boost::asio::io_service& io_service, std::function<void()>& dispatcher, boost::asio::local::stream_protocol::endpoint endpoint)
    : StreamClientSocketBase(io_service, dispatcher, endpoint)
  {
    
  }
#endif //STUB_LocalStreamClientSocket_LocalStreamClientSocket

#ifndef STUB_LocalStreamClientSocket_write
//#define STUB_LocalStreamClientSocket_write
  size_t LocalStreamClientSocket::write()
  {
    return 0;
  }
#endif //STUB_LocalStreamClientSocket_write

#ifndef STUB_LocalStreamClientSocket_read_blocking
//#define STUB_LocalStreamClientSocket_read_blocking
  size_t LocalStreamClientSocket::read_blocking()
  {
    return 0;
  }
#endif //STUB_LocalStreamClientSocket_read_blocking

#ifndef STUB_LocalStreamClientSocket_do_read
//#define STUB_LocalStreamClientSocket_do_read
  void LocalStreamClientSocket::do_read()
  {
    
  }
#endif //STUB_LocalStreamClientSocket_do_read


#ifndef STUB_AtlasStreamClient_waitForLoginResponse
//#define STUB_AtlasStreamClient_waitForLoginResponse
  int AtlasStreamClient::waitForLoginResponse()
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_waitForLoginResponse

#ifndef STUB_AtlasStreamClient_dispatch
//#define STUB_AtlasStreamClient_dispatch
  void AtlasStreamClient::dispatch()
  {
    
  }
#endif //STUB_AtlasStreamClient_dispatch

#ifndef STUB_AtlasStreamClient_objectArrived
//#define STUB_AtlasStreamClient_objectArrived
  void AtlasStreamClient::objectArrived(const Atlas::Objects::Root &)
  {
    
  }
#endif //STUB_AtlasStreamClient_objectArrived

#ifndef STUB_AtlasStreamClient_operation
//#define STUB_AtlasStreamClient_operation
  void AtlasStreamClient::operation(const Atlas::Objects::Operation::RootOperation &)
  {
    
  }
#endif //STUB_AtlasStreamClient_operation

#ifndef STUB_AtlasStreamClient_infoArrived
//#define STUB_AtlasStreamClient_infoArrived
  void AtlasStreamClient::infoArrived(const Atlas::Objects::Operation::RootOperation &)
  {
    
  }
#endif //STUB_AtlasStreamClient_infoArrived

#ifndef STUB_AtlasStreamClient_errorArrived
//#define STUB_AtlasStreamClient_errorArrived
  void AtlasStreamClient::errorArrived(const Atlas::Objects::Operation::RootOperation &)
  {
    
  }
#endif //STUB_AtlasStreamClient_errorArrived

#ifndef STUB_AtlasStreamClient_appearanceArrived
//#define STUB_AtlasStreamClient_appearanceArrived
  void AtlasStreamClient::appearanceArrived(const Operation &)
  {
    
  }
#endif //STUB_AtlasStreamClient_appearanceArrived

#ifndef STUB_AtlasStreamClient_disappearanceArrived
//#define STUB_AtlasStreamClient_disappearanceArrived
  void AtlasStreamClient::disappearanceArrived(const Operation &)
  {
    
  }
#endif //STUB_AtlasStreamClient_disappearanceArrived

#ifndef STUB_AtlasStreamClient_sightArrived
//#define STUB_AtlasStreamClient_sightArrived
  void AtlasStreamClient::sightArrived(const Operation &)
  {
    
  }
#endif //STUB_AtlasStreamClient_sightArrived

#ifndef STUB_AtlasStreamClient_soundArrived
//#define STUB_AtlasStreamClient_soundArrived
  void AtlasStreamClient::soundArrived(const Operation &)
  {
    
  }
#endif //STUB_AtlasStreamClient_soundArrived

#ifndef STUB_AtlasStreamClient_loginSuccess
//#define STUB_AtlasStreamClient_loginSuccess
  void AtlasStreamClient::loginSuccess(const Atlas::Objects::Root & arg)
  {
    
  }
#endif //STUB_AtlasStreamClient_loginSuccess

#ifndef STUB_AtlasStreamClient_AtlasStreamClient
//#define STUB_AtlasStreamClient_AtlasStreamClient
   AtlasStreamClient::AtlasStreamClient()
    : Atlas::Objects::ObjectsDecoder()
    , m_socket(nullptr),m_currentTask(nullptr)
  {
    
  }
#endif //STUB_AtlasStreamClient_AtlasStreamClient

#ifndef STUB_AtlasStreamClient_AtlasStreamClient_DTOR
//#define STUB_AtlasStreamClient_AtlasStreamClient_DTOR
   AtlasStreamClient::~AtlasStreamClient()
  {
    
  }
#endif //STUB_AtlasStreamClient_AtlasStreamClient_DTOR

#ifndef STUB_AtlasStreamClient_send
//#define STUB_AtlasStreamClient_send
  void AtlasStreamClient::send(const Atlas::Objects::Operation::RootOperation & op)
  {
    
  }
#endif //STUB_AtlasStreamClient_send

#ifndef STUB_AtlasStreamClient_connect
//#define STUB_AtlasStreamClient_connect
  int AtlasStreamClient::connect(const std::string & host, unsigned short port )
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_connect

#ifndef STUB_AtlasStreamClient_connectLocal
//#define STUB_AtlasStreamClient_connectLocal
  int AtlasStreamClient::connectLocal(const std::string & host)
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_connectLocal

#ifndef STUB_AtlasStreamClient_cleanDisconnect
//#define STUB_AtlasStreamClient_cleanDisconnect
  int AtlasStreamClient::cleanDisconnect()
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_cleanDisconnect

#ifndef STUB_AtlasStreamClient_login
//#define STUB_AtlasStreamClient_login
  int AtlasStreamClient::login(const std::string & username, const std::string & password)
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_login

#ifndef STUB_AtlasStreamClient_create
//#define STUB_AtlasStreamClient_create
  int AtlasStreamClient::create(const std::string & type, const std::string & username, const std::string & password)
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_create

#ifndef STUB_AtlasStreamClient_pollOne
//#define STUB_AtlasStreamClient_pollOne
  int AtlasStreamClient::pollOne(const boost::posix_time::time_duration& duration)
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_pollOne

#ifndef STUB_AtlasStreamClient_poll
//#define STUB_AtlasStreamClient_poll
  int AtlasStreamClient::poll(const boost::posix_time::time_duration& duration)
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_poll

#ifndef STUB_AtlasStreamClient_poll
//#define STUB_AtlasStreamClient_poll
  int AtlasStreamClient::poll(int seconds , int microseconds )
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_poll

#ifndef STUB_AtlasStreamClient_output
//#define STUB_AtlasStreamClient_output
  void AtlasStreamClient::output(const Atlas::Message::Element & item, size_t depth ) const
  {
    
  }
#endif //STUB_AtlasStreamClient_output

#ifndef STUB_AtlasStreamClient_output
//#define STUB_AtlasStreamClient_output
  void AtlasStreamClient::output(const Atlas::Objects::Root & item) const
  {
    
  }
#endif //STUB_AtlasStreamClient_output

#ifndef STUB_AtlasStreamClient_runTask
//#define STUB_AtlasStreamClient_runTask
  int AtlasStreamClient::runTask(ClientTask * task, const std::string & arg)
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_runTask

#ifndef STUB_AtlasStreamClient_endTask
//#define STUB_AtlasStreamClient_endTask
  int AtlasStreamClient::endTask()
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_endTask

#ifndef STUB_AtlasStreamClient_hasTask
//#define STUB_AtlasStreamClient_hasTask
  bool AtlasStreamClient::hasTask() const
  {
    return false;
  }
#endif //STUB_AtlasStreamClient_hasTask

#ifndef STUB_AtlasStreamClient_pollUntilTaskComplete
//#define STUB_AtlasStreamClient_pollUntilTaskComplete
  int AtlasStreamClient::pollUntilTaskComplete()
  {
    return 0;
  }
#endif //STUB_AtlasStreamClient_pollUntilTaskComplete


#endif