// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubBaseWorld_custom.h file.

#include "common/BaseWorld.h"
#include "stubBaseWorld_custom.h"

#ifndef STUB_COMMON_BASEWORLD_H
#define STUB_COMMON_BASEWORLD_H

#ifndef STUB_BaseWorld_BaseWorld
//#define STUB_BaseWorld_BaseWorld
   BaseWorld::BaseWorld(LocatedEntity & gw)
    : m_defaultLocation(nullptr),m_limboLocation(nullptr)
  {
    
  }
#endif //STUB_BaseWorld_BaseWorld

#ifndef STUB_BaseWorld_BaseWorld_DTOR
//#define STUB_BaseWorld_BaseWorld_DTOR
   BaseWorld::~BaseWorld()
  {
    
  }
#endif //STUB_BaseWorld_BaseWorld_DTOR

#ifndef STUB_BaseWorld_getEntity
//#define STUB_BaseWorld_getEntity
  LocatedEntity* BaseWorld::getEntity(const std::string & id) const
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_getEntity

#ifndef STUB_BaseWorld_getEntity
//#define STUB_BaseWorld_getEntity
  LocatedEntity* BaseWorld::getEntity(long id) const
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_getEntity

#ifndef STUB_BaseWorld_getRootEntity
//#define STUB_BaseWorld_getRootEntity
  LocatedEntity& BaseWorld::getRootEntity()
  {
    return *static_cast<LocatedEntity*>(nullptr);
  }
#endif //STUB_BaseWorld_getRootEntity

#ifndef STUB_BaseWorld_getRootEntity
//#define STUB_BaseWorld_getRootEntity
  LocatedEntity& BaseWorld::getRootEntity() const
  {
    return *static_cast<LocatedEntity*>(nullptr);
  }
#endif //STUB_BaseWorld_getRootEntity

#ifndef STUB_BaseWorld_getDefaultLocation
//#define STUB_BaseWorld_getDefaultLocation
  LocatedEntity& BaseWorld::getDefaultLocation()
  {
    return *static_cast<LocatedEntity*>(nullptr);
  }
#endif //STUB_BaseWorld_getDefaultLocation

#ifndef STUB_BaseWorld_getDefaultLocation
//#define STUB_BaseWorld_getDefaultLocation
  LocatedEntity& BaseWorld::getDefaultLocation() const
  {
    return *static_cast<LocatedEntity*>(nullptr);
  }
#endif //STUB_BaseWorld_getDefaultLocation

#ifndef STUB_BaseWorld_setDefaultLocation
//#define STUB_BaseWorld_setDefaultLocation
  void BaseWorld::setDefaultLocation(LocatedEntity* entity)
  {
    
  }
#endif //STUB_BaseWorld_setDefaultLocation

#ifndef STUB_BaseWorld_getLimboLocation
//#define STUB_BaseWorld_getLimboLocation
  LocatedEntity* BaseWorld::getLimboLocation() const
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_getLimboLocation

#ifndef STUB_BaseWorld_setLimboLocation
//#define STUB_BaseWorld_setLimboLocation
  void BaseWorld::setLimboLocation(LocatedEntity* entity)
  {
    
  }
#endif //STUB_BaseWorld_setLimboLocation

#ifndef STUB_BaseWorld_getTime
//#define STUB_BaseWorld_getTime
  double BaseWorld::getTime() const
  {
    return 0;
  }
#endif //STUB_BaseWorld_getTime

#ifndef STUB_BaseWorld_setIsSuspended
//#define STUB_BaseWorld_setIsSuspended
  void BaseWorld::setIsSuspended(bool suspended)
  {
    
  }
#endif //STUB_BaseWorld_setIsSuspended

#ifndef STUB_BaseWorld_idle
//#define STUB_BaseWorld_idle
  bool BaseWorld::idle()
  {
    return false;
  }
#endif //STUB_BaseWorld_idle

#ifndef STUB_BaseWorld_addEntity
//#define STUB_BaseWorld_addEntity
  LocatedEntity* BaseWorld::addEntity(LocatedEntity * obj)
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_addEntity

#ifndef STUB_BaseWorld_addNewEntity
//#define STUB_BaseWorld_addNewEntity
  LocatedEntity* BaseWorld::addNewEntity(const std::string & type, const Atlas::Objects::Entity::RootEntity &)
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_addNewEntity

#ifndef STUB_BaseWorld_delEntity
//#define STUB_BaseWorld_delEntity
  void BaseWorld::delEntity(LocatedEntity * obj)
  {
    
  }
#endif //STUB_BaseWorld_delEntity

#ifndef STUB_BaseWorld_createSpawnPoint
//#define STUB_BaseWorld_createSpawnPoint
  int BaseWorld::createSpawnPoint(const Atlas::Message::MapType & data, LocatedEntity * ent)
  {
    return 0;
  }
#endif //STUB_BaseWorld_createSpawnPoint

#ifndef STUB_BaseWorld_removeSpawnPoint
//#define STUB_BaseWorld_removeSpawnPoint
  int BaseWorld::removeSpawnPoint(LocatedEntity * ent)
  {
    return 0;
  }
#endif //STUB_BaseWorld_removeSpawnPoint

#ifndef STUB_BaseWorld_getSpawnList
//#define STUB_BaseWorld_getSpawnList
  int BaseWorld::getSpawnList(Atlas::Message::ListType & data)
  {
    return 0;
  }
#endif //STUB_BaseWorld_getSpawnList

#ifndef STUB_BaseWorld_spawnNewEntity
//#define STUB_BaseWorld_spawnNewEntity
  LocatedEntity* BaseWorld::spawnNewEntity(const std::string & name, const std::string & type, const Atlas::Objects::Entity::RootEntity &)
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_spawnNewEntity

#ifndef STUB_BaseWorld_moveToSpawn
//#define STUB_BaseWorld_moveToSpawn
  int BaseWorld::moveToSpawn(const std::string & name, Location& location)
  {
    return 0;
  }
#endif //STUB_BaseWorld_moveToSpawn

#ifndef STUB_BaseWorld_newTask
//#define STUB_BaseWorld_newTask
  Task* BaseWorld::newTask(const std::string &, LocatedEntity &)
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_newTask

#ifndef STUB_BaseWorld_activateTask
//#define STUB_BaseWorld_activateTask
  Task* BaseWorld::activateTask(const std::string &, const std::string &, LocatedEntity *, LocatedEntity &)
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_activateTask

#ifndef STUB_BaseWorld_newArithmetic
//#define STUB_BaseWorld_newArithmetic
  ArithmeticScript* BaseWorld::newArithmetic(const std::string &, LocatedEntity *)
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_newArithmetic

#ifndef STUB_BaseWorld_message
//#define STUB_BaseWorld_message
  void BaseWorld::message(const Atlas::Objects::Operation::RootOperation &, LocatedEntity & obj)
  {
    
  }
#endif //STUB_BaseWorld_message

#ifndef STUB_BaseWorld_findByName
//#define STUB_BaseWorld_findByName
  LocatedEntity* BaseWorld::findByName(const std::string & name)
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_findByName

#ifndef STUB_BaseWorld_findByType
//#define STUB_BaseWorld_findByType
  LocatedEntity* BaseWorld::findByType(const std::string & type)
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_findByType

#ifndef STUB_BaseWorld_addPerceptive
//#define STUB_BaseWorld_addPerceptive
  void BaseWorld::addPerceptive(LocatedEntity *)
  {
    
  }
#endif //STUB_BaseWorld_addPerceptive


#endif