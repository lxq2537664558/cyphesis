// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubShape_custom.h file.

#include "physics/Shape.h"
#include "stubShape_custom.h"

#ifndef STUB_PHYSICS_SHAPE_H
#define STUB_PHYSICS_SHAPE_H

#ifndef STUB_Shape_Shape
//#define STUB_Shape_Shape
   Shape::Shape()
  {
    
  }
#endif //STUB_Shape_Shape

#ifndef STUB_Shape_Shape_DTOR
//#define STUB_Shape_Shape_DTOR
   Shape::~Shape()
  {
    
  }
#endif //STUB_Shape_Shape_DTOR

#ifndef STUB_Shape_size
//#define STUB_Shape_size
  size_t Shape::size() const
  {
    return 0;
  }
#endif //STUB_Shape_size

#ifndef STUB_Shape_isValid
//#define STUB_Shape_isValid
  bool Shape::isValid() const
  {
    return false;
  }
#endif //STUB_Shape_isValid

#ifndef STUB_Shape_area
//#define STUB_Shape_area
  WFMath::CoordType Shape::area() const
  {
    return *static_cast<WFMath::CoordType*>(nullptr);
  }
#endif //STUB_Shape_area

#ifndef STUB_Shape_footprint
//#define STUB_Shape_footprint
  WFMath::AxisBox<2> Shape::footprint() const
  {
    return *static_cast<WFMath::AxisBox<2>*>(nullptr);
  }
#endif //STUB_Shape_footprint

#ifndef STUB_Shape_outline
//#define STUB_Shape_outline
  WFMath::Polygon<2> Shape::outline(WFMath::CoordType p ) const
  {
    return *static_cast<WFMath::Polygon<2>*>(nullptr);
  }
#endif //STUB_Shape_outline

#ifndef STUB_Shape_scale
//#define STUB_Shape_scale
  void Shape::scale(WFMath::CoordType factor)
  {
    
  }
#endif //STUB_Shape_scale

#ifndef STUB_Shape_equal
//#define STUB_Shape_equal
  bool Shape::equal(const Shape & other) const
  {
    return false;
  }
#endif //STUB_Shape_equal

#ifndef STUB_Shape_copy
//#define STUB_Shape_copy
  Shape* Shape::copy() const
  {
    return nullptr;
  }
#endif //STUB_Shape_copy

#ifndef STUB_Shape_toAtlas
//#define STUB_Shape_toAtlas
  void Shape::toAtlas(Atlas::Message::MapType &) const
  {
    
  }
#endif //STUB_Shape_toAtlas

#ifndef STUB_Shape_fromAtlas
//#define STUB_Shape_fromAtlas
  int Shape::fromAtlas(const Atlas::Message::Element &)
  {
    return 0;
  }
#endif //STUB_Shape_fromAtlas

#ifndef STUB_Shape_stream
//#define STUB_Shape_stream
  void Shape::stream(std::ostream &) const
  {
    
  }
#endif //STUB_Shape_stream

#ifndef STUB_Shape_newFromAtlas
//#define STUB_Shape_newFromAtlas
   Shape* Shape::newFromAtlas(const Atlas::Message::MapType &)
  {
    return nullptr;
  }
#endif //STUB_Shape_newFromAtlas


#ifndef STUB_Form<2>_getCorner
//#define STUB_Form<2>_getCorner
  WFMath::Point<2> Form<2>::getCorner(size_t) const
  {
    return *static_cast<WFMath::Point<2>*>(nullptr);
  }
#endif //STUB_Form<2>_getCorner

#ifndef STUB_Form<2>_centre
//#define STUB_Form<2>_centre
  WFMath::Point<2> Form<2>::centre() const
  {
    return *static_cast<WFMath::Point<2>*>(nullptr);
  }
#endif //STUB_Form<2>_centre

#ifndef STUB_Form<2>_lowCorner
//#define STUB_Form<2>_lowCorner
  WFMath::Point<2> Form<2>::lowCorner() const
  {
    return *static_cast<WFMath::Point<2>*>(nullptr);
  }
#endif //STUB_Form<2>_lowCorner

#ifndef STUB_Form<2>_highCorner
//#define STUB_Form<2>_highCorner
  WFMath::Point<2> Form<2>::highCorner() const
  {
    return *static_cast<WFMath::Point<2>*>(nullptr);
  }
#endif //STUB_Form<2>_highCorner

#ifndef STUB_Form<2>_intersect
//#define STUB_Form<2>_intersect
  bool Form<2>::intersect(const WFMath::Point<2> &) const
  {
    return false;
  }
#endif //STUB_Form<2>_intersect

#ifndef STUB_Form<2>_copy
//#define STUB_Form<2>_copy
  Form<2>* Form<2>::copy() const
  {
    return nullptr;
  }
#endif //STUB_Form<2>_copy


#ifndef STUB_Form<3>_getCorner
//#define STUB_Form<3>_getCorner
  WFMath::Point<3> Form<3>::getCorner(size_t) const
  {
    return *static_cast<WFMath::Point<3>*>(nullptr);
  }
#endif //STUB_Form<3>_getCorner

#ifndef STUB_Form<3>_centre
//#define STUB_Form<3>_centre
  WFMath::Point<3> Form<3>::centre() const
  {
    return *static_cast<WFMath::Point<3>*>(nullptr);
  }
#endif //STUB_Form<3>_centre

#ifndef STUB_Form<3>_lowCorner
//#define STUB_Form<3>_lowCorner
  WFMath::Point<3> Form<3>::lowCorner() const
  {
    return *static_cast<WFMath::Point<3>*>(nullptr);
  }
#endif //STUB_Form<3>_lowCorner

#ifndef STUB_Form<3>_highCorner
//#define STUB_Form<3>_highCorner
  WFMath::Point<3> Form<3>::highCorner() const
  {
    return *static_cast<WFMath::Point<3>*>(nullptr);
  }
#endif //STUB_Form<3>_highCorner

#ifndef STUB_Form<3>_intersect
//#define STUB_Form<3>_intersect
  bool Form<3>::intersect(const WFMath::Point<3> &) const
  {
    return false;
  }
#endif //STUB_Form<3>_intersect

#ifndef STUB_Form<3>_copy
//#define STUB_Form<3>_copy
  Form<2>* Form<3>::copy() const
  {
    return nullptr;
  }
#endif //STUB_Form<3>_copy


#ifndef STUB_MathShape_getType
//#define STUB_MathShape_getType
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  const char* MathShape<int,dim,2,class,ShapeT>::getType() const
  {
    return nullptr;
  }
#endif //STUB_MathShape_getType

#ifndef STUB_MathShape_MathShape
//#define STUB_MathShape_MathShape
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
   MathShape<int,dim,2,class,ShapeT>::MathShape()
    : Form()
  {
    
  }
#endif //STUB_MathShape_MathShape

#ifndef STUB_MathShape_MathShape
//#define STUB_MathShape_MathShape
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
   MathShape<int,dim,2,class,ShapeT>::MathShape(const ShapeT<dim> &)
    : Form(???)
  {
    
  }
#endif //STUB_MathShape_MathShape

#ifndef STUB_MathShape_size
//#define STUB_MathShape_size
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  size_t MathShape<int,dim,2,class,ShapeT>::size() const
  {
    return 0;
  }
#endif //STUB_MathShape_size

#ifndef STUB_MathShape_isValid
//#define STUB_MathShape_isValid
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  bool MathShape<int,dim,2,class,ShapeT>::isValid() const
  {
    return false;
  }
#endif //STUB_MathShape_isValid

#ifndef STUB_MathShape_getCorner
//#define STUB_MathShape_getCorner
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  WFMath::Point<dim> MathShape<int,dim,2,class,ShapeT>::getCorner(size_t) const
  {
    return *static_cast<WFMath::Point<dim>*>(nullptr);
  }
#endif //STUB_MathShape_getCorner

#ifndef STUB_MathShape_area
//#define STUB_MathShape_area
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  WFMath::CoordType MathShape<int,dim,2,class,ShapeT>::area() const
  {
    return *static_cast<WFMath::CoordType*>(nullptr);
  }
#endif //STUB_MathShape_area

#ifndef STUB_MathShape_centre
//#define STUB_MathShape_centre
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  WFMath::Point<dim> MathShape<int,dim,2,class,ShapeT>::centre() const
  {
    return *static_cast<WFMath::Point<dim>*>(nullptr);
  }
#endif //STUB_MathShape_centre

#ifndef STUB_MathShape_footprint
//#define STUB_MathShape_footprint
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  WFMath::AxisBox<2> MathShape<int,dim,2,class,ShapeT>::footprint() const
  {
    return *static_cast<WFMath::AxisBox<2>*>(nullptr);
  }
#endif //STUB_MathShape_footprint

#ifndef STUB_MathShape_outline
//#define STUB_MathShape_outline
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  WFMath::Polygon<2> MathShape<int,dim,2,class,ShapeT>::outline(WFMath::CoordType precision) const
  {
    return *static_cast<WFMath::Polygon<2>*>(nullptr);
  }
#endif //STUB_MathShape_outline

#ifndef STUB_MathShape_lowCorner
//#define STUB_MathShape_lowCorner
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  WFMath::Point<dim> MathShape<int,dim,2,class,ShapeT>::lowCorner() const
  {
    return *static_cast<WFMath::Point<dim>*>(nullptr);
  }
#endif //STUB_MathShape_lowCorner

#ifndef STUB_MathShape_highCorner
//#define STUB_MathShape_highCorner
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  WFMath::Point<dim> MathShape<int,dim,2,class,ShapeT>::highCorner() const
  {
    return *static_cast<WFMath::Point<dim>*>(nullptr);
  }
#endif //STUB_MathShape_highCorner

#ifndef STUB_MathShape_intersect
//#define STUB_MathShape_intersect
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  bool MathShape<int,dim,2,class,ShapeT>::intersect(const WFMath::Point<dim> &) const
  {
    return false;
  }
#endif //STUB_MathShape_intersect

#ifndef STUB_MathShape_scale
//#define STUB_MathShape_scale
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  void MathShape<int,dim,2,class,ShapeT>::scale(WFMath::CoordType factor)
  {
    
  }
#endif //STUB_MathShape_scale

#ifndef STUB_MathShape_equal
//#define STUB_MathShape_equal
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  bool MathShape<int,dim,2,class,ShapeT>::equal(const Shape & other) const
  {
    return false;
  }
#endif //STUB_MathShape_equal

#ifndef STUB_MathShape_copy
//#define STUB_MathShape_copy
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  MathShape<ShapeT, dim>* MathShape<int,dim,2,class,ShapeT>::copy() const
  {
    return nullptr;
  }
#endif //STUB_MathShape_copy

#ifndef STUB_MathShape_toAtlas
//#define STUB_MathShape_toAtlas
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  void MathShape<int,dim,2,class,ShapeT>::toAtlas(Atlas::Message::MapType &) const
  {
    
  }
#endif //STUB_MathShape_toAtlas

#ifndef STUB_MathShape_fromAtlas
//#define STUB_MathShape_fromAtlas
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  int MathShape<int,dim,2,class,ShapeT>::fromAtlas(const Atlas::Message::Element &)
  {
    return 0;
  }
#endif //STUB_MathShape_fromAtlas

#ifndef STUB_MathShape_stream
//#define STUB_MathShape_stream
  template <typename int,typename dim,typename 2,typename class,typename ShapeT>
  void MathShape<int,dim,2,class,ShapeT>::stream(std::ostream &) const
  {
    
  }
#endif //STUB_MathShape_stream


#endif